import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import { RootState } from "../store";
import { TemplateInterface } from "../../core/Models/Template";
import { TemplatesService } from "../../core/Services/TemplatesService";

export interface TemplateLoadingState {
  template: TemplateInterface;
  templates: TemplateInterface[];
  status: "idle" | "loading" | "failed";
  status_message: string | null;
}

const templatesService = new TemplatesService();

const initialState: TemplateLoadingState = {
  template: templatesService.getDefaultTemplate(),
  templates: [],
  status: "idle",
  status_message: null,
};

export const loadTemplates = createAsyncThunk(
  "templates/load/all",
  async (data, { rejectWithValue }) => {
    try {
      const response = await templatesService.getTemplates();
      return response;
    } catch (err) {
      return rejectWithValue(err);
    }
  }
);

export const loadTemplate = createAsyncThunk(
  "templates/load/selected",
  async (data, { rejectWithValue }) => {
    try {
      const response = await initialState.template;
      return response;
    } catch (err) {
      return rejectWithValue(err);
    }
  }
);

export const selectTemplate = createAsyncThunk(
  "templates/select",
  async (id: string, { rejectWithValue }) => {
    try {
      const response = await templatesService.getTemplateById(id);
      return response;
    } catch (err) {
      return rejectWithValue(err);
    }
  }
);

export const TemplatesStore = createSlice({
  name: "Templatestore",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(loadTemplates.pending, (state) => {
        state.status = "loading";
        state.status_message = "loading data...";
      })
      .addCase(loadTemplates.fulfilled, (state, action) => {
        state.status = "idle";
        state.templates = action.payload;
      })
      .addCase(loadTemplates.rejected, (state) => {
        state.status = "failed";
        state.status_message = "Fetching templates  error, try again...";
      });
    builder
      .addCase(selectTemplate.pending, (state) => {
        state.status = "loading";
        state.status_message = "loading data...";
      })
      .addCase(selectTemplate.fulfilled, (state, action) => {
        state.status = "idle";
        state.template =
          action.payload ?? templatesService.getDefaultTemplate();
      })
      .addCase(selectTemplate.rejected, (state) => {
        state.status = "failed";
        state.status_message = "Fetching Template Data error, try again...";
      });
  },
});

export const getTemplatesStore = (state: RootState) => state.templatesStore;

export default TemplatesStore.reducer;
